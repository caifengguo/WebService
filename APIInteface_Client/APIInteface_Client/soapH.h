/* soapH.h
   Generated by gSOAP 2.8.22 from APIINTEFACE.H

Copyright(C) 2000-2015, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_byte(soap, data), 0) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_int(soap, data), 0) || soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (27)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, data), 0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (26)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, data), 0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (23)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, data), 0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__any = __any; _p->__type = __type; _p->fault = fault; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (21)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, data), 0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (20)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, data), 0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE_ns__endBd
#define SOAP_TYPE_ns__endBd (19)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__endBd(struct soap*, struct ns__endBd *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__endBd(struct soap*, const struct ns__endBd *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__endBd(struct soap*, const char*, int, const struct ns__endBd *, const char*);
SOAP_FMAC3 struct ns__endBd * SOAP_FMAC4 soap_in_ns__endBd(struct soap*, const char*, struct ns__endBd *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__endBd(struct soap*, const struct ns__endBd *, const char*, const char*);

#ifndef soap_write_ns__endBd
#define soap_write_ns__endBd(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__endBd(soap, data), 0) || soap_put_ns__endBd(soap, data, "ns:endBd", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__endBd * SOAP_FMAC4 soap_get_ns__endBd(struct soap*, struct ns__endBd *, const char*, const char*);

#ifndef soap_read_ns__endBd
#define soap_read_ns__endBd(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__endBd(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__endBd * SOAP_FMAC2 soap_instantiate_ns__endBd(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__endBd * soap_new_ns__endBd(struct soap *soap, int n = -1) { return soap_instantiate_ns__endBd(soap, n, NULL, NULL, NULL); }

inline struct ns__endBd * soap_new_req_ns__endBd(struct soap *soap) { struct ns__endBd *_p = soap_instantiate_ns__endBd(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__endBd(soap, _p); } return _p; }

inline struct ns__endBd * soap_new_set_ns__endBd(struct soap *soap) { struct ns__endBd *_p = soap_instantiate_ns__endBd(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__endBd(soap, _p); } return _p; }

inline void soap_delete_ns__endBd(struct soap *soap, struct ns__endBd *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__endBd(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__endBdResponse
#define SOAP_TYPE_ns__endBdResponse (18)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__endBdResponse(struct soap*, struct ns__endBdResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__endBdResponse(struct soap*, const struct ns__endBdResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__endBdResponse(struct soap*, const char*, int, const struct ns__endBdResponse *, const char*);
SOAP_FMAC3 struct ns__endBdResponse * SOAP_FMAC4 soap_in_ns__endBdResponse(struct soap*, const char*, struct ns__endBdResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__endBdResponse(struct soap*, const struct ns__endBdResponse *, const char*, const char*);

#ifndef soap_write_ns__endBdResponse
#define soap_write_ns__endBdResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__endBdResponse(soap, data), 0) || soap_put_ns__endBdResponse(soap, data, "ns:endBdResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__endBdResponse * SOAP_FMAC4 soap_get_ns__endBdResponse(struct soap*, struct ns__endBdResponse *, const char*, const char*);

#ifndef soap_read_ns__endBdResponse
#define soap_read_ns__endBdResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__endBdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__endBdResponse * SOAP_FMAC2 soap_instantiate_ns__endBdResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__endBdResponse * soap_new_ns__endBdResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__endBdResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__endBdResponse * soap_new_req_ns__endBdResponse(struct soap *soap) { struct ns__endBdResponse *_p = soap_instantiate_ns__endBdResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__endBdResponse(soap, _p); } return _p; }

inline struct ns__endBdResponse * soap_new_set_ns__endBdResponse(struct soap *soap, int *result) { struct ns__endBdResponse *_p = soap_instantiate_ns__endBdResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__endBdResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns__endBdResponse(struct soap *soap, struct ns__endBdResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__endBdResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__startBd
#define SOAP_TYPE_ns__startBd (16)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__startBd(struct soap*, struct ns__startBd *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__startBd(struct soap*, const struct ns__startBd *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__startBd(struct soap*, const char*, int, const struct ns__startBd *, const char*);
SOAP_FMAC3 struct ns__startBd * SOAP_FMAC4 soap_in_ns__startBd(struct soap*, const char*, struct ns__startBd *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__startBd(struct soap*, const struct ns__startBd *, const char*, const char*);

#ifndef soap_write_ns__startBd
#define soap_write_ns__startBd(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__startBd(soap, data), 0) || soap_put_ns__startBd(soap, data, "ns:startBd", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__startBd * SOAP_FMAC4 soap_get_ns__startBd(struct soap*, struct ns__startBd *, const char*, const char*);

#ifndef soap_read_ns__startBd
#define soap_read_ns__startBd(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__startBd(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__startBd * SOAP_FMAC2 soap_instantiate_ns__startBd(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__startBd * soap_new_ns__startBd(struct soap *soap, int n = -1) { return soap_instantiate_ns__startBd(soap, n, NULL, NULL, NULL); }

inline struct ns__startBd * soap_new_req_ns__startBd(struct soap *soap) { struct ns__startBd *_p = soap_instantiate_ns__startBd(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__startBd(soap, _p); } return _p; }

inline struct ns__startBd * soap_new_set_ns__startBd(struct soap *soap) { struct ns__startBd *_p = soap_instantiate_ns__startBd(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__startBd(soap, _p); } return _p; }

inline void soap_delete_ns__startBd(struct soap *soap, struct ns__startBd *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__startBd(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__startBdResponse
#define SOAP_TYPE_ns__startBdResponse (15)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__startBdResponse(struct soap*, struct ns__startBdResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__startBdResponse(struct soap*, const struct ns__startBdResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__startBdResponse(struct soap*, const char*, int, const struct ns__startBdResponse *, const char*);
SOAP_FMAC3 struct ns__startBdResponse * SOAP_FMAC4 soap_in_ns__startBdResponse(struct soap*, const char*, struct ns__startBdResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__startBdResponse(struct soap*, const struct ns__startBdResponse *, const char*, const char*);

#ifndef soap_write_ns__startBdResponse
#define soap_write_ns__startBdResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__startBdResponse(soap, data), 0) || soap_put_ns__startBdResponse(soap, data, "ns:startBdResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__startBdResponse * SOAP_FMAC4 soap_get_ns__startBdResponse(struct soap*, struct ns__startBdResponse *, const char*, const char*);

#ifndef soap_read_ns__startBdResponse
#define soap_read_ns__startBdResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__startBdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__startBdResponse * SOAP_FMAC2 soap_instantiate_ns__startBdResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__startBdResponse * soap_new_ns__startBdResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__startBdResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__startBdResponse * soap_new_req_ns__startBdResponse(struct soap *soap) { struct ns__startBdResponse *_p = soap_instantiate_ns__startBdResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__startBdResponse(soap, _p); } return _p; }

inline struct ns__startBdResponse * soap_new_set_ns__startBdResponse(struct soap *soap, int *result) { struct ns__startBdResponse *_p = soap_instantiate_ns__startBdResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__startBdResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns__startBdResponse(struct soap *soap, struct ns__startBdResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__startBdResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__endModel
#define SOAP_TYPE_ns__endModel (13)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__endModel(struct soap*, struct ns__endModel *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__endModel(struct soap*, const struct ns__endModel *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__endModel(struct soap*, const char*, int, const struct ns__endModel *, const char*);
SOAP_FMAC3 struct ns__endModel * SOAP_FMAC4 soap_in_ns__endModel(struct soap*, const char*, struct ns__endModel *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__endModel(struct soap*, const struct ns__endModel *, const char*, const char*);

#ifndef soap_write_ns__endModel
#define soap_write_ns__endModel(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__endModel(soap, data), 0) || soap_put_ns__endModel(soap, data, "ns:endModel", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__endModel * SOAP_FMAC4 soap_get_ns__endModel(struct soap*, struct ns__endModel *, const char*, const char*);

#ifndef soap_read_ns__endModel
#define soap_read_ns__endModel(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__endModel(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__endModel * SOAP_FMAC2 soap_instantiate_ns__endModel(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__endModel * soap_new_ns__endModel(struct soap *soap, int n = -1) { return soap_instantiate_ns__endModel(soap, n, NULL, NULL, NULL); }

inline struct ns__endModel * soap_new_req_ns__endModel(struct soap *soap) { struct ns__endModel *_p = soap_instantiate_ns__endModel(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__endModel(soap, _p); } return _p; }

inline struct ns__endModel * soap_new_set_ns__endModel(struct soap *soap) { struct ns__endModel *_p = soap_instantiate_ns__endModel(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__endModel(soap, _p); } return _p; }

inline void soap_delete_ns__endModel(struct soap *soap, struct ns__endModel *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__endModel(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__endModelResponse
#define SOAP_TYPE_ns__endModelResponse (12)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__endModelResponse(struct soap*, struct ns__endModelResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__endModelResponse(struct soap*, const struct ns__endModelResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__endModelResponse(struct soap*, const char*, int, const struct ns__endModelResponse *, const char*);
SOAP_FMAC3 struct ns__endModelResponse * SOAP_FMAC4 soap_in_ns__endModelResponse(struct soap*, const char*, struct ns__endModelResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__endModelResponse(struct soap*, const struct ns__endModelResponse *, const char*, const char*);

#ifndef soap_write_ns__endModelResponse
#define soap_write_ns__endModelResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__endModelResponse(soap, data), 0) || soap_put_ns__endModelResponse(soap, data, "ns:endModelResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__endModelResponse * SOAP_FMAC4 soap_get_ns__endModelResponse(struct soap*, struct ns__endModelResponse *, const char*, const char*);

#ifndef soap_read_ns__endModelResponse
#define soap_read_ns__endModelResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__endModelResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__endModelResponse * SOAP_FMAC2 soap_instantiate_ns__endModelResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__endModelResponse * soap_new_ns__endModelResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__endModelResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__endModelResponse * soap_new_req_ns__endModelResponse(struct soap *soap) { struct ns__endModelResponse *_p = soap_instantiate_ns__endModelResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__endModelResponse(soap, _p); } return _p; }

inline struct ns__endModelResponse * soap_new_set_ns__endModelResponse(struct soap *soap, int *result) { struct ns__endModelResponse *_p = soap_instantiate_ns__endModelResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__endModelResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns__endModelResponse(struct soap *soap, struct ns__endModelResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__endModelResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__startModel
#define SOAP_TYPE_ns__startModel (10)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__startModel(struct soap*, struct ns__startModel *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__startModel(struct soap*, const struct ns__startModel *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__startModel(struct soap*, const char*, int, const struct ns__startModel *, const char*);
SOAP_FMAC3 struct ns__startModel * SOAP_FMAC4 soap_in_ns__startModel(struct soap*, const char*, struct ns__startModel *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__startModel(struct soap*, const struct ns__startModel *, const char*, const char*);

#ifndef soap_write_ns__startModel
#define soap_write_ns__startModel(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__startModel(soap, data), 0) || soap_put_ns__startModel(soap, data, "ns:startModel", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__startModel * SOAP_FMAC4 soap_get_ns__startModel(struct soap*, struct ns__startModel *, const char*, const char*);

#ifndef soap_read_ns__startModel
#define soap_read_ns__startModel(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__startModel(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__startModel * SOAP_FMAC2 soap_instantiate_ns__startModel(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__startModel * soap_new_ns__startModel(struct soap *soap, int n = -1) { return soap_instantiate_ns__startModel(soap, n, NULL, NULL, NULL); }

inline struct ns__startModel * soap_new_req_ns__startModel(struct soap *soap) { struct ns__startModel *_p = soap_instantiate_ns__startModel(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__startModel(soap, _p); } return _p; }

inline struct ns__startModel * soap_new_set_ns__startModel(struct soap *soap) { struct ns__startModel *_p = soap_instantiate_ns__startModel(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__startModel(soap, _p); } return _p; }

inline void soap_delete_ns__startModel(struct soap *soap, struct ns__startModel *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__startModel(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__startModelResponse
#define SOAP_TYPE_ns__startModelResponse (9)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__startModelResponse(struct soap*, struct ns__startModelResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__startModelResponse(struct soap*, const struct ns__startModelResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__startModelResponse(struct soap*, const char*, int, const struct ns__startModelResponse *, const char*);
SOAP_FMAC3 struct ns__startModelResponse * SOAP_FMAC4 soap_in_ns__startModelResponse(struct soap*, const char*, struct ns__startModelResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__startModelResponse(struct soap*, const struct ns__startModelResponse *, const char*, const char*);

#ifndef soap_write_ns__startModelResponse
#define soap_write_ns__startModelResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__startModelResponse(soap, data), 0) || soap_put_ns__startModelResponse(soap, data, "ns:startModelResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__startModelResponse * SOAP_FMAC4 soap_get_ns__startModelResponse(struct soap*, struct ns__startModelResponse *, const char*, const char*);

#ifndef soap_read_ns__startModelResponse
#define soap_read_ns__startModelResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__startModelResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__startModelResponse * SOAP_FMAC2 soap_instantiate_ns__startModelResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__startModelResponse * soap_new_ns__startModelResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__startModelResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__startModelResponse * soap_new_req_ns__startModelResponse(struct soap *soap) { struct ns__startModelResponse *_p = soap_instantiate_ns__startModelResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__startModelResponse(soap, _p); } return _p; }

inline struct ns__startModelResponse * soap_new_set_ns__startModelResponse(struct soap *soap, int *result) { struct ns__startModelResponse *_p = soap_instantiate_ns__startModelResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__startModelResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns__startModelResponse(struct soap *soap, struct ns__startModelResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__startModelResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (29)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Reason(soap, data), 0) || soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (28)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Detail(soap, data), 0) || soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (22)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Code(soap, data), 0) || soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE_PointerToint
#define SOAP_TYPE_PointerToint (7)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap*, int *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap*, const char *, int, int *const*, const char *);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap*, const char*, int **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap*, int *const*, const char*, const char*);

#ifndef soap_write_PointerToint
#define soap_write_PointerToint(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToint(soap, data), 0) || soap_put_PointerToint(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap*, int **, const char*, const char*);

#ifndef soap_read_PointerToint
#define soap_read_PointerToint(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToint(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__QName(soap, data), 0) || soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_string(soap, data), 0) || soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

/* End of soapH.h */
